/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface StoreFrontInterface extends ethers.utils.Interface {
  functions: {
    "balance(address)": FunctionFragment;
    "buyToken(uint256)": FunctionFragment;
    "changeValue(uint256,uint256)": FunctionFragment;
    "createToken(string,uint256,uint256)": FunctionFragment;
    "myBalance()": FunctionFragment;
    "ownership(uint256)": FunctionFragment;
    "tokenOwnership(uint256)": FunctionFragment;
    "tokenValue(uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeValue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "myBalance", values?: void): string;
  encodeFunctionData(
    functionFragment: "ownership",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwnership",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: void): string;

  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "myBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownership", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class StoreFront extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: StoreFrontInterface;

  functions: {
    balance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    buyToken(
      _id: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    changeValue(
      _id: BigNumberish,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createToken(
      _name: string,
      value: BigNumberish,
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    myBalance(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ownership(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tokenOwnership(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tokenValue(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    withdraw(overrides?: Overrides): Promise<ContractTransaction>;
  };

  balance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyToken(
    _id: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  changeValue(
    _id: BigNumberish,
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createToken(
    _name: string,
    value: BigNumberish,
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  myBalance(overrides?: CallOverrides): Promise<BigNumber>;

  ownership(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokenOwnership(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokenValue(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  staticCall: {
    balance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyToken(_id: BigNumberish, overrides?: PayableOverrides): Promise<void>;

    changeValue(
      _id: BigNumberish,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    createToken(
      _name: string,
      value: BigNumberish,
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    myBalance(overrides?: CallOverrides): Promise<BigNumber>;

    ownership(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokenOwnership(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenValue(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    balance(arg0: string): Promise<BigNumber>;
    buyToken(_id: BigNumberish): Promise<BigNumber>;
    changeValue(_id: BigNumberish, newValue: BigNumberish): Promise<BigNumber>;
    createToken(
      _name: string,
      value: BigNumberish,
      size: BigNumberish
    ): Promise<BigNumber>;
    myBalance(): Promise<BigNumber>;
    ownership(arg0: BigNumberish): Promise<BigNumber>;
    tokenOwnership(_id: BigNumberish): Promise<BigNumber>;
    tokenValue(_id: BigNumberish): Promise<BigNumber>;
    withdraw(): Promise<BigNumber>;
  };

  populateTransaction: {
    balance(arg0: string): Promise<PopulatedTransaction>;
    buyToken(_id: BigNumberish): Promise<PopulatedTransaction>;
    changeValue(
      _id: BigNumberish,
      newValue: BigNumberish
    ): Promise<PopulatedTransaction>;
    createToken(
      _name: string,
      value: BigNumberish,
      size: BigNumberish
    ): Promise<PopulatedTransaction>;
    myBalance(): Promise<PopulatedTransaction>;
    ownership(arg0: BigNumberish): Promise<PopulatedTransaction>;
    tokenOwnership(_id: BigNumberish): Promise<PopulatedTransaction>;
    tokenValue(_id: BigNumberish): Promise<PopulatedTransaction>;
    withdraw(): Promise<PopulatedTransaction>;
  };
}
